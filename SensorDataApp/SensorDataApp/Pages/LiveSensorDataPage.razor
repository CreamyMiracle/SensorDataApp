@page "/live/{sensorid}"

<PageTitle>@SensorId</PageTitle>

@using Microsoft.AspNetCore.SignalR.Client
@using SensorDataApp.Data
@using SensorDataApp.Model
@inject SensorService SensorService

<h1>@SensorId live</h1>

@if (liveDataPoints == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
        <b>Show items </b>
        <input @bind="Count" />
    </p>

    <MatTable Items="@liveDataPoints" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Sensor ID</th>
            <th>Value</th>
            <th>Timestamp</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.SensorId</td>
            <td>@context.Value</td>
            <td>@context.Timestamp</td>
        </MatTableRow>
    </MatTable>
}

@code {
    [Parameter]
    public string? SensorId { get; set; }

    private HubConnection? hubConnection;
    private static string _server = "http://localhost:5181";
    private List<DataPoint>? liveDataPoints = new List<DataPoint>();

    private int count = 5;

    public int Count
    {
        get
        {
            return count;
        }
        set
        {
            if (count == value)
            {
                return;
            }
            count = value;
            ReformatData();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(new Uri(_server + "/sensordatahub"))
            .WithAutomaticReconnect()
            .Build();

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("JoinGroup", SensorId);

        hubConnection.On<DataPoint>("ReceiveDataPoint", (datapoint) =>
        {
            AddPoint(datapoint);
        });
    }

    private void ReformatData()
    {
        int extraCount = liveDataPoints.Count - Count;
        if (extraCount >= 0 && liveDataPoints?.Count >= extraCount)
        {
            liveDataPoints.RemoveRange(0, extraCount);
        }
    }

    private void AddPoint(DataPoint point)
    {
        liveDataPoints?.Add(point);
        ReformatData();
        StateHasChanged();
    }
}