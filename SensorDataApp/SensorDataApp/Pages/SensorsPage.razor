@page "/sensors"

<PageTitle>Sensors</PageTitle>

@using Microsoft.AspNetCore.SignalR.Client
@using SensorDataApp.Data
@using SensorDataApp.Model
@inject SensorService SensorService
@inject NavigationManager NavigationManager

<h1>Sensors</h1>

<p>All sensors listed below</p>

@if (sensors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MatTable Items="@sortedSensors" class="mat-elevation-z5" UseSortHeaderRow="true">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="Id">Id</MatSortHeader>
                <MatSortHeader SortId="UpperLimit">Max limit</MatSortHeader>
                <MatSortHeader SortId="LowerLimit">Min limit</MatSortHeader>
                <th>View</th>
                <th>View</th>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.UpperLimit</td>
            <td>@context.LowerLimit</td>
            <td @onclick="()=> NavigateToSensorLive(context)">Live</td>
            <td @onclick="()=> NavigateToSensorHistory(context)">History</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private HubConnection? hubConnection;
    private static string _server = "http://localhost:5181";
    private List<Sensor>? sensors = new List<Sensor>();
    private Sensor[]? sortedSensors = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(new Uri(_server + "/sensorshub"))
       .WithAutomaticReconnect()
       .Build();

        await hubConnection.StartAsync();

        hubConnection.On<Sensor>("ReceiveSensor", (sensor) =>
        {
            AddSensor(sensor);
        });

        sensors = (await SensorService.GetSensors())?.ToList();
        sortedSensors = sensors?.ToArray();
    }

    private void AddSensor(Sensor sensor)
    {
        sensors?.Add(sensor);
        sortedSensors = sensors?.ToArray();
        StateHasChanged();
    }

    private void NavigateToSensorLive(object param)
    {
        Sensor? sensor = param as Sensor;
        NavigationManager.NavigateTo("live/" + sensor?.Id);
    }
    private void NavigateToSensorHistory(object param)
    {
        Sensor? sensor = param as Sensor;
        NavigationManager.NavigateTo("history/" + sensor?.Id);
    }

    private void SortData(MatSortChangedEvent sort)
    {
        sortedSensors = sensors?.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<Sensor>? comparison = null;
            switch (sort.SortId)
            {
                case "Id":
                    comparison = (s1, s2) => string.Compare(s1.Id, s2.Id, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "UpperLimit":
                    comparison = (s1, s2) => s1.UpperLimit.CompareTo(s2.UpperLimit);
                    break;
                case "LowerLimit":
                    comparison = (s1, s2) => s1.LowerLimit.CompareTo(s2.LowerLimit);
                    break;
            }
            if (comparison != null && sortedSensors != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedSensors, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedSensors, comparison);
                }
            }
        }
    }
}
